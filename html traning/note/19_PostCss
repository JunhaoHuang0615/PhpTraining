提供了一种用javascript代码来处理CSS。 如自动添加浏览器前缀，代码合并， 代码压缩等。
    把源文件的css 转换成更精简的css
 https://postcss.org/
 安装： 
 1.安装node环境   node -v 可以检查是否安装成功
        先确定自己安装了   Homebrew : 这个在python里面有讲怎么安装  brew -v可以查看是否成功安装
        brew list 这个命令可以查看使用brew安装了什么
        brew link node
        brew uninstall node
        brew install node  使用这个就可以，如果之前没装过node
    国内使用node，可能需要cnpm镜像
        npm install -g cnpm --registry=https://registry.npm.taobao.org
        
2.npm install postcss-cli -g   然后就可以使用postcss了

 使用：
    现在根目录下创建两个文件夹  一个是src: 这个是存放Postcss的源文件， 在这里先写要用postcss处理的.css的源文件
                            一个是dist: 这个是存放转换后的css文件
    去src和dist的根目录下启动命令行
        postcss src/test.css -o dist/test.css     -o代表转换   后面的dist的命名最好与源文件相同
        输入 postcss src/test.css -o dist/test.css -w 则表示监听，每一次改源文件都会自动转换

3. 在src下创建
    postcss.config.js
        这个是postcss的配置文件，就是node.js的文件，用于配置写css的插件

安装插件：
    autoprefixer : 用于自动添加html表头
        命令行输入： cnpm i autoprefixer
        安装成功后去postcss.config.js文件中开始配置，输入
        const autoprefixer = require('autoprefixer');
        module.exports = {
            plugins : [
                autoprefixer(
                    {
                        browsers : ['> 0%'] //这一条的意思是给所有浏览器添加上前缀，-wevbit-等，我们只要写tansform属性，前缀会自动生成
                    }
                ),
                pcImport,
                cssnano,
                cssnext,
                stylelint({
                        "rules" : {
                            "color-no-invalid-hex" : true       不能有无效的颜色 //可以添加很多颜色
                        }
                    }

                )
            ]
        };
    postcss-import: 对多个css文件进行合并的插件
        cnpm i postcss-import

        const pcImport = require('postcss-import');
         在上面加入 pcImport,

    cssnano 对css的压缩处理
        cnpm i cssnano

        const cssnano = require('cssnano');
        在上面加入 cssnano
    cssnext 对css降级处理，提高兼容性
        cnpm i postcss-cssnext

        const cssnext = require('postcss-cssnext');
        在上面加入 cssnext

    stylelint: 对代码进行规范
        cnpm i stylelint

        const stylelint = require('stylelint');
        在上面写入
        stylelint({
                        "rules" : {
                            "color-no-invalid-hex" : true       不能有无效的颜色 //可以添加很多颜色
                        }
                    }

    postcss-sprites  精灵图，自动生成雪地图，并生成位置
        cnpm i postcss-sprites

        const sprites = require('postcss-sprites');

        在上面写入  
            sprites({

                spritePath:'./dist/sprites'    配置生成精灵图的位置
            })

